#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PreduzeceProjektniCentar.Models.LinqSql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Preduzece")]
	public partial class PreduzecaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertKontakt(Kontakt instance);
    partial void UpdateKontakt(Kontakt instance);
    partial void DeleteKontakt(Kontakt instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertMail(Mail instance);
    partial void UpdateMail(Mail instance);
    partial void DeleteMail(Mail instance);
    partial void InsertPreduzece(Preduzece instance);
    partial void UpdatePreduzece(Preduzece instance);
    partial void DeletePreduzece(Preduzece instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertTelefon(Telefon instance);
    partial void UpdateTelefon(Telefon instance);
    partial void DeleteTelefon(Telefon instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public PreduzecaDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PreduzeceConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PreduzecaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PreduzecaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PreduzecaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PreduzecaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Kontakt> Kontakts
		{
			get
			{
				return this.GetTable<Kontakt>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<Mail> Mails
		{
			get
			{
				return this.GetTable<Mail>();
			}
		}
		
		public System.Data.Linq.Table<Preduzece> Preduzeces
		{
			get
			{
				return this.GetTable<Preduzece>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Telefon> Telefons
		{
			get
			{
				return this.GetTable<Telefon>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Kontakt")]
	public partial class Kontakt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KontaktID;
		
		private string _Ime;
		
		private string _Prezime;
		
		private string _RadnoMesto;
		
		private int _PreduzeceID;
		
		private EntitySet<Mail> _Mails;
		
		private EntitySet<Telefon> _Telefons;
		
		private EntityRef<Preduzece> _Preduzece;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKontaktIDChanging(int value);
    partial void OnKontaktIDChanged();
    partial void OnImeChanging(string value);
    partial void OnImeChanged();
    partial void OnPrezimeChanging(string value);
    partial void OnPrezimeChanged();
    partial void OnRadnoMestoChanging(string value);
    partial void OnRadnoMestoChanged();
    partial void OnPreduzeceIDChanging(int value);
    partial void OnPreduzeceIDChanged();
    #endregion
		
		public Kontakt()
		{
			this._Mails = new EntitySet<Mail>(new Action<Mail>(this.attach_Mails), new Action<Mail>(this.detach_Mails));
			this._Telefons = new EntitySet<Telefon>(new Action<Telefon>(this.attach_Telefons), new Action<Telefon>(this.detach_Telefons));
			this._Preduzece = default(EntityRef<Preduzece>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KontaktID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int KontaktID
		{
			get
			{
				return this._KontaktID;
			}
			set
			{
				if ((this._KontaktID != value))
				{
					this.OnKontaktIDChanging(value);
					this.SendPropertyChanging();
					this._KontaktID = value;
					this.SendPropertyChanged("KontaktID");
					this.OnKontaktIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ime", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Ime
		{
			get
			{
				return this._Ime;
			}
			set
			{
				if ((this._Ime != value))
				{
					this.OnImeChanging(value);
					this.SendPropertyChanging();
					this._Ime = value;
					this.SendPropertyChanged("Ime");
					this.OnImeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prezime", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Prezime
		{
			get
			{
				return this._Prezime;
			}
			set
			{
				if ((this._Prezime != value))
				{
					this.OnPrezimeChanging(value);
					this.SendPropertyChanging();
					this._Prezime = value;
					this.SendPropertyChanged("Prezime");
					this.OnPrezimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RadnoMesto", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RadnoMesto
		{
			get
			{
				return this._RadnoMesto;
			}
			set
			{
				if ((this._RadnoMesto != value))
				{
					this.OnRadnoMestoChanging(value);
					this.SendPropertyChanging();
					this._RadnoMesto = value;
					this.SendPropertyChanged("RadnoMesto");
					this.OnRadnoMestoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreduzeceID", DbType="Int NOT NULL")]
		public int PreduzeceID
		{
			get
			{
				return this._PreduzeceID;
			}
			set
			{
				if ((this._PreduzeceID != value))
				{
					if (this._Preduzece.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPreduzeceIDChanging(value);
					this.SendPropertyChanging();
					this._PreduzeceID = value;
					this.SendPropertyChanged("PreduzeceID");
					this.OnPreduzeceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kontakt_Mail", Storage="_Mails", ThisKey="KontaktID", OtherKey="KontaktID")]
		public EntitySet<Mail> Mails
		{
			get
			{
				return this._Mails;
			}
			set
			{
				this._Mails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kontakt_Telefon", Storage="_Telefons", ThisKey="KontaktID", OtherKey="KontaktID")]
		public EntitySet<Telefon> Telefons
		{
			get
			{
				return this._Telefons;
			}
			set
			{
				this._Telefons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Preduzece_Kontakt", Storage="_Preduzece", ThisKey="PreduzeceID", OtherKey="PreduzeceID", IsForeignKey=true)]
		public Preduzece Preduzece
		{
			get
			{
				return this._Preduzece.Entity;
			}
			set
			{
				Preduzece previousValue = this._Preduzece.Entity;
				if (((previousValue != value) 
							|| (this._Preduzece.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Preduzece.Entity = null;
						previousValue.Kontakts.Remove(this);
					}
					this._Preduzece.Entity = value;
					if ((value != null))
					{
						value.Kontakts.Add(this);
						this._PreduzeceID = value.PreduzeceID;
					}
					else
					{
						this._PreduzeceID = default(int);
					}
					this.SendPropertyChanged("Preduzece");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Mails(Mail entity)
		{
			this.SendPropertyChanging();
			entity.Kontakt = this;
		}
		
		private void detach_Mails(Mail entity)
		{
			this.SendPropertyChanging();
			entity.Kontakt = null;
		}
		
		private void attach_Telefons(Telefon entity)
		{
			this.SendPropertyChanging();
			entity.Kontakt = this;
		}
		
		private void detach_Telefons(Telefon entity)
		{
			this.SendPropertyChanging();
			entity.Kontakt = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserRoleID;
		
		private int _UserID;
		
		private int _RoleID;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserRoleIDChanging(int value);
    partial void OnUserRoleIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    #endregion
		
		public UserRole()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserRoleID
		{
			get
			{
				return this._UserRoleID;
			}
			set
			{
				if ((this._UserRoleID != value))
				{
					this.OnUserRoleIDChanging(value);
					this.SendPropertyChanging();
					this._UserRoleID = value;
					this.SendPropertyChanged("UserRoleID");
					this.OnUserRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mail")]
	public partial class Mail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MailAdresa;
		
		private string _OnakaTipa;
		
		private int _KontaktID;
		
		private EntityRef<Kontakt> _Kontakt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMailAdresaChanging(string value);
    partial void OnMailAdresaChanged();
    partial void OnOnakaTipaChanging(string value);
    partial void OnOnakaTipaChanged();
    partial void OnKontaktIDChanging(int value);
    partial void OnKontaktIDChanged();
    #endregion
		
		public Mail()
		{
			this._Kontakt = default(EntityRef<Kontakt>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailAdresa", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MailAdresa
		{
			get
			{
				return this._MailAdresa;
			}
			set
			{
				if ((this._MailAdresa != value))
				{
					this.OnMailAdresaChanging(value);
					this.SendPropertyChanging();
					this._MailAdresa = value;
					this.SendPropertyChanged("MailAdresa");
					this.OnMailAdresaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnakaTipa", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OnakaTipa
		{
			get
			{
				return this._OnakaTipa;
			}
			set
			{
				if ((this._OnakaTipa != value))
				{
					this.OnOnakaTipaChanging(value);
					this.SendPropertyChanging();
					this._OnakaTipa = value;
					this.SendPropertyChanged("OnakaTipa");
					this.OnOnakaTipaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KontaktID", DbType="Int NOT NULL")]
		public int KontaktID
		{
			get
			{
				return this._KontaktID;
			}
			set
			{
				if ((this._KontaktID != value))
				{
					if (this._Kontakt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKontaktIDChanging(value);
					this.SendPropertyChanging();
					this._KontaktID = value;
					this.SendPropertyChanged("KontaktID");
					this.OnKontaktIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kontakt_Mail", Storage="_Kontakt", ThisKey="KontaktID", OtherKey="KontaktID", IsForeignKey=true)]
		public Kontakt Kontakt
		{
			get
			{
				return this._Kontakt.Entity;
			}
			set
			{
				Kontakt previousValue = this._Kontakt.Entity;
				if (((previousValue != value) 
							|| (this._Kontakt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Kontakt.Entity = null;
						previousValue.Mails.Remove(this);
					}
					this._Kontakt.Entity = value;
					if ((value != null))
					{
						value.Mails.Add(this);
						this._KontaktID = value.KontaktID;
					}
					else
					{
						this._KontaktID = default(int);
					}
					this.SendPropertyChanged("Kontakt");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Preduzece")]
	public partial class Preduzece : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PreduzeceID;
		
		private string _Naziv;
		
		private string _Adresa;
		
		private string _Opstina;
		
		private int _Postanskibroj;
		
		private decimal _PIB;
		
		private int _SifraDelatnosti;
		
		private string _OpisDelatnosti;
		
		private decimal _BrRacuna;
		
		private string _WebStr;
		
		private string _Pecat;
		
		private string _Beleska;
		
		private EntitySet<Kontakt> _Kontakts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPreduzeceIDChanging(int value);
    partial void OnPreduzeceIDChanged();
    partial void OnNazivChanging(string value);
    partial void OnNazivChanged();
    partial void OnAdresaChanging(string value);
    partial void OnAdresaChanged();
    partial void OnOpstinaChanging(string value);
    partial void OnOpstinaChanged();
    partial void OnPostanskibrojChanging(int value);
    partial void OnPostanskibrojChanged();
    partial void OnPIBChanging(decimal value);
    partial void OnPIBChanged();
    partial void OnSifraDelatnostiChanging(int value);
    partial void OnSifraDelatnostiChanged();
    partial void OnOpisDelatnostiChanging(string value);
    partial void OnOpisDelatnostiChanged();
    partial void OnBrRacunaChanging(decimal value);
    partial void OnBrRacunaChanged();
    partial void OnWebStrChanging(string value);
    partial void OnWebStrChanged();
    partial void OnPecatChanging(string value);
    partial void OnPecatChanged();
    partial void OnBeleskaChanging(string value);
    partial void OnBeleskaChanged();
    #endregion
		
		public Preduzece()
		{
			this._Kontakts = new EntitySet<Kontakt>(new Action<Kontakt>(this.attach_Kontakts), new Action<Kontakt>(this.detach_Kontakts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreduzeceID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PreduzeceID
		{
			get
			{
				return this._PreduzeceID;
			}
			set
			{
				if ((this._PreduzeceID != value))
				{
					this.OnPreduzeceIDChanging(value);
					this.SendPropertyChanging();
					this._PreduzeceID = value;
					this.SendPropertyChanged("PreduzeceID");
					this.OnPreduzeceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Naziv", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Naziv
		{
			get
			{
				return this._Naziv;
			}
			set
			{
				if ((this._Naziv != value))
				{
					this.OnNazivChanging(value);
					this.SendPropertyChanging();
					this._Naziv = value;
					this.SendPropertyChanged("Naziv");
					this.OnNazivChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adresa", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Adresa
		{
			get
			{
				return this._Adresa;
			}
			set
			{
				if ((this._Adresa != value))
				{
					this.OnAdresaChanging(value);
					this.SendPropertyChanging();
					this._Adresa = value;
					this.SendPropertyChanged("Adresa");
					this.OnAdresaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Opstina", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Opstina
		{
			get
			{
				return this._Opstina;
			}
			set
			{
				if ((this._Opstina != value))
				{
					this.OnOpstinaChanging(value);
					this.SendPropertyChanging();
					this._Opstina = value;
					this.SendPropertyChanged("Opstina");
					this.OnOpstinaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Postanskibroj", DbType="Int NOT NULL")]
		public int Postanskibroj
		{
			get
			{
				return this._Postanskibroj;
			}
			set
			{
				if ((this._Postanskibroj != value))
				{
					this.OnPostanskibrojChanging(value);
					this.SendPropertyChanging();
					this._Postanskibroj = value;
					this.SendPropertyChanged("Postanskibroj");
					this.OnPostanskibrojChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PIB", DbType="Decimal(9,0) NOT NULL")]
		public decimal PIB
		{
			get
			{
				return this._PIB;
			}
			set
			{
				if ((this._PIB != value))
				{
					this.OnPIBChanging(value);
					this.SendPropertyChanging();
					this._PIB = value;
					this.SendPropertyChanged("PIB");
					this.OnPIBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SifraDelatnosti", DbType="Int NOT NULL")]
		public int SifraDelatnosti
		{
			get
			{
				return this._SifraDelatnosti;
			}
			set
			{
				if ((this._SifraDelatnosti != value))
				{
					this.OnSifraDelatnostiChanging(value);
					this.SendPropertyChanging();
					this._SifraDelatnosti = value;
					this.SendPropertyChanged("SifraDelatnosti");
					this.OnSifraDelatnostiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpisDelatnosti", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OpisDelatnosti
		{
			get
			{
				return this._OpisDelatnosti;
			}
			set
			{
				if ((this._OpisDelatnosti != value))
				{
					this.OnOpisDelatnostiChanging(value);
					this.SendPropertyChanging();
					this._OpisDelatnosti = value;
					this.SendPropertyChanged("OpisDelatnosti");
					this.OnOpisDelatnostiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrRacuna", DbType="Decimal(13,0) NOT NULL")]
		public decimal BrRacuna
		{
			get
			{
				return this._BrRacuna;
			}
			set
			{
				if ((this._BrRacuna != value))
				{
					this.OnBrRacunaChanging(value);
					this.SendPropertyChanging();
					this._BrRacuna = value;
					this.SendPropertyChanged("BrRacuna");
					this.OnBrRacunaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebStr", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string WebStr
		{
			get
			{
				return this._WebStr;
			}
			set
			{
				if ((this._WebStr != value))
				{
					this.OnWebStrChanging(value);
					this.SendPropertyChanging();
					this._WebStr = value;
					this.SendPropertyChanged("WebStr");
					this.OnWebStrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pecat", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Pecat
		{
			get
			{
				return this._Pecat;
			}
			set
			{
				if ((this._Pecat != value))
				{
					this.OnPecatChanging(value);
					this.SendPropertyChanging();
					this._Pecat = value;
					this.SendPropertyChanged("Pecat");
					this.OnPecatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Beleska", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Beleska
		{
			get
			{
				return this._Beleska;
			}
			set
			{
				if ((this._Beleska != value))
				{
					this.OnBeleskaChanging(value);
					this.SendPropertyChanging();
					this._Beleska = value;
					this.SendPropertyChanged("Beleska");
					this.OnBeleskaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Preduzece_Kontakt", Storage="_Kontakts", ThisKey="PreduzeceID", OtherKey="PreduzeceID")]
		public EntitySet<Kontakt> Kontakts
		{
			get
			{
				return this._Kontakts;
			}
			set
			{
				this._Kontakts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Kontakts(Kontakt entity)
		{
			this.SendPropertyChanging();
			entity.Preduzece = this;
		}
		
		private void detach_Kontakts(Kontakt entity)
		{
			this.SendPropertyChanging();
			entity.Preduzece = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _Naziv;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnNazivChanging(string value);
    partial void OnNazivChanged();
    #endregion
		
		public Role()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Naziv", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Naziv
		{
			get
			{
				return this._Naziv;
			}
			set
			{
				if ((this._Naziv != value))
				{
					this.OnNazivChanging(value);
					this.SendPropertyChanging();
					this._Naziv = value;
					this.SendPropertyChanged("Naziv");
					this.OnNazivChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_UserRoles", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Telefon")]
	public partial class Telefon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TelefonID;
		
		private string _OznakaTipa;
		
		private decimal _BrojTelefona;
		
		private string _Lokal;
		
		private int _KontaktID;
		
		private EntityRef<Kontakt> _Kontakt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTelefonIDChanging(int value);
    partial void OnTelefonIDChanged();
    partial void OnOznakaTipaChanging(string value);
    partial void OnOznakaTipaChanged();
    partial void OnBrojTelefonaChanging(decimal value);
    partial void OnBrojTelefonaChanged();
    partial void OnLokalChanging(string value);
    partial void OnLokalChanged();
    partial void OnKontaktIDChanging(int value);
    partial void OnKontaktIDChanged();
    #endregion
		
		public Telefon()
		{
			this._Kontakt = default(EntityRef<Kontakt>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelefonID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TelefonID
		{
			get
			{
				return this._TelefonID;
			}
			set
			{
				if ((this._TelefonID != value))
				{
					this.OnTelefonIDChanging(value);
					this.SendPropertyChanging();
					this._TelefonID = value;
					this.SendPropertyChanged("TelefonID");
					this.OnTelefonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OznakaTipa", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OznakaTipa
		{
			get
			{
				return this._OznakaTipa;
			}
			set
			{
				if ((this._OznakaTipa != value))
				{
					this.OnOznakaTipaChanging(value);
					this.SendPropertyChanging();
					this._OznakaTipa = value;
					this.SendPropertyChanged("OznakaTipa");
					this.OnOznakaTipaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrojTelefona", DbType="Decimal(7,0) NOT NULL")]
		public decimal BrojTelefona
		{
			get
			{
				return this._BrojTelefona;
			}
			set
			{
				if ((this._BrojTelefona != value))
				{
					this.OnBrojTelefonaChanging(value);
					this.SendPropertyChanging();
					this._BrojTelefona = value;
					this.SendPropertyChanged("BrojTelefona");
					this.OnBrojTelefonaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lokal", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Lokal
		{
			get
			{
				return this._Lokal;
			}
			set
			{
				if ((this._Lokal != value))
				{
					this.OnLokalChanging(value);
					this.SendPropertyChanging();
					this._Lokal = value;
					this.SendPropertyChanged("Lokal");
					this.OnLokalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KontaktID", DbType="Int NOT NULL")]
		public int KontaktID
		{
			get
			{
				return this._KontaktID;
			}
			set
			{
				if ((this._KontaktID != value))
				{
					if (this._Kontakt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKontaktIDChanging(value);
					this.SendPropertyChanging();
					this._KontaktID = value;
					this.SendPropertyChanged("KontaktID");
					this.OnKontaktIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kontakt_Telefon", Storage="_Kontakt", ThisKey="KontaktID", OtherKey="KontaktID", IsForeignKey=true)]
		public Kontakt Kontakt
		{
			get
			{
				return this._Kontakt.Entity;
			}
			set
			{
				Kontakt previousValue = this._Kontakt.Entity;
				if (((previousValue != value) 
							|| (this._Kontakt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Kontakt.Entity = null;
						previousValue.Telefons.Remove(this);
					}
					this._Kontakt.Entity = value;
					if ((value != null))
					{
						value.Telefons.Add(this);
						this._KontaktID = value.KontaktID;
					}
					else
					{
						this._KontaktID = default(int);
					}
					this.SendPropertyChanged("Kontakt");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Username;
		
		private string _Password;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_UserRoles", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
